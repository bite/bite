[DEFAULT]
	# command shortcuts
	s: search
	g: get
	a: attachments
	m: modify
	c: create
	at: attach

	# search for items assigned to the configured user
	me: search -a %{CONFIG:user}

	# meta alias takes a function as an argument and calls function for all other input
	*loop: !loop() { for i in "${@:2}"; do $1 $i; done }; loop

	# iterate over whitespace-separated values passed as the second argument
	*sloop: !sloop() { for i in $2; do $1 $i ${@:3}; done }; sloop

	# iterate over comma-separated values passed as the second argument
	*cloop: !cloop() { for i in $(echo $2 | tr "," " "); do $1 $i ${@:3}; done }; cloop

	# meta alias takes a function as an argument and spawns function in parallel for all other input
	*parallel: !p() { export -f $1; echo ${@:2} | tr ' ' '\n' | parallel --will-cite -q bash -c '$0 {}' $1; }; p

# aliases for all bugzilla services
[:bugzilla:]
	# output list of bug dependencies by ID
	depends: !f() { bite -q search --id $1 --fields depends_on --output -; }; f
	# output list of bug blockers by ID
	blocks: !f() { bite -q search --id $1 --fields blocks --output -; }; f

	# output list of open bug dependencies
	show-depends: !
		get_deps() {
			# get bug deps
			DEPENDS=( $(%{depends} $1) )
			# convert them into CSV
			if [[ -n ${DEPENDS} ]]; then
				DEPENDS=$(IFS=, ; echo "${DEPENDS[*]}")
				bite -q search --id ${DEPENDS} ${@:2}
			fi
		}
		get_input() {
			if [[ $1 == - ]]; then
				IDS=( $(</dev/stdin) )
			else
				IFS=', ' read -r -a IDS <<< "$1"
			fi
			%{*parallel} get_deps ${IDS[@]}
		}
		get_input

	# output list of open bug blockers
	show-blocks: !
		get_blockers() {
			# get bug blockers
			BLOCKS=( $(%{blocks} $1) )
			# convert them into CSV
			BLOCKS=$(IFS=, ; echo "${BLOCKS[*]}")
			[[ -n ${BLOCKS} ]] && bite -q search --id ${BLOCKS} ${@:2}
		}
		%{*cloop} get_blockers

# vim: set ft=sh:
